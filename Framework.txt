Framework:
---------


1. Data driven 
2. Page Object Model
3. JUnit
4. TestNG

-> Cucumber

Pre - requisite:

1. Maven Project.
2. Base class Creation


Maven Project:
--------------

Java project ---> 

1. Folder structure.   
	-> JRE System library
	-> src
2. Dependency management.
	-> jar file 

Maven Project --->
	-> Contains different folder structure.
	-> Very easy when compared to jar file


15 Jar file:
------------

1 Jar file configuration time -> 2 mints
15 -> 30 mints
Version update -> 2.3 -> 2.34 --> 2 mints


When you go for project ? 

1 dependency ->less than a minute


Advantage of maven over java:

1. Dependency management.
2. Folder structure.
3. Maven commands.


Steps to create a Maven project:
--------------------------------

1. File -> Click -> New -> Select Maven project.
2. Select the check box (Create a simple maven project) and click Next.
3. Mandatory fields:
	1. group id    ->  any name in format package name(Eg: com.sample, org.sample)
	2. Artifact id ->  Project name
4. Goto pom.xml (Note: If you get any error in project tag, add s in first two http and save).


Steps to add dependency in a maven project:
-------------------------------------------

1. Open chrome and type the required dependency (Selenium maven dependency).
2. Click the first link (Maven Repository).
3. Select the latest verion.
4. Copy the dependency.
5. In pom.xml below version create dependencie tag
	<dependencies>
	</dependencies>
6. Paste the copied dependecy under dependencies tag and save it (ctrl + s).


Naming conversion for an element:
---------------------------------

-> text box     : txtUsername, txtPassword
-> button       : btnLogin, btnSignUp
-> text field   : textWelcomeMessage
-> radio button : rdoMale
-> Check box    : chkBox
-> Drop down    : ddnCountry


2. Base class: 
--------------

-> It is an utility class (Contains all methods)
-> We can access that class methods using extends keyword in another class.
-> Why we go for baseclass ?
	1. To avoid memory wastage.
	2. Code reusability.
	3. Code simplify.

1. What is void ?
	-> Returns nothing.
2. What is Return type ?
	-> It will return something.
3. What is paramters ?
	-> Some input which is required for the method.

Base class methods:
-------------------

protected static WebDriver driver;
	Alert alert;
	// Srini

	// 1. Enter the url
	public static void launchtheappln(String url) {
		driver.get(url);
	}

	// 2. Maximize the window
	public static void maximizewindow() {
		driver.manage().window().maximize();
	}

	// 2.1 Maximize the window
	public static void minimizeindow() {
		driver.manage().window().minimize();
	}

	// 3. Insert value in text box
	public void elementSendKeys(WebElement element, String data) {
		explicitWait(element);
		boolean isenabled = isenabled(element);
		boolean isdisplayed = isdisplayed(element);
		if (isenabled && isdisplayed) {
			element.sendKeys(data);
		}

	}

	// 3.1. Insert value in text box
	public void elementSendKeysandEnter(WebElement element, String data) {
		explicitWait(element);
		boolean isenabled = isenabled(element);
		boolean isdisplayed = isdisplayed(element);
		if (isenabled && isdisplayed) {
			element.sendKeys(data, Keys.ENTER);
		}

	}

	// 4. Element click
	public void elementClick(WebElement element) {
		explicitWait(element);
		boolean isdisplayed = isdisplayed(element);
		boolean isenabled = isenabled(element);
		if (isdisplayed && isenabled) {
			element.click();
		}

	}

	// 5. Click OK in alert
	public void alertaccept() {
		alert = driver.switchTo().alert();
		alert.accept();
	}

	// 6. Click cancel in alert
	public void alertDismiss() {
		alert = driver.switchTo().alert();
		alert.dismiss();
	}

	// 7. Get the text from web page
	public String elementGetText(WebElement element) {

		String res = element.getText();

		return res;

	}

	// 8. Get the inserted value from the text box
	public String elementGetAttribute(WebElement element, String data) {
		explicitWait(element);
		String res = null;
		boolean isdisplayed = isdisplayed(element);
		if (isdisplayed) {
			res = element.getAttribute(data);
		}
		return res;
	}

	// 9.Close all windows
	public void closeAll() {
		driver.quit();
	}

	// 10. Close current window
	public static void closeCurrent() {
		driver.close();
	}

	// 11. Get the title
	public String getTheTitle() {
		String title = driver.getTitle();
		return title;
	}

	// 12. Get the current url
	public String getCurrentUrl() {
		String currentUrl = driver.getCurrentUrl();
		return currentUrl;
	}

	// 13. Select drop down using text
	public void elementDdnVisibleText(WebElement element, String data) {
		explicitWait(element);
		boolean isdisplayed = isdisplayed(element);
		if (isdisplayed) {
			Select select = new Select(element);
			select.selectByVisibleText(data);
		}
	}

	// 14. Select drop down using attribute
	public void elementDdnAtrribute(WebElement element, String data) {
		explicitWait(element);
		boolean isdisplayed = isdisplayed(element);
		if (isdisplayed) {
			Select select = new Select(element);
			select.selectByValue(data);
		}
	}

	// 15. Select drop down using index
	public void elementDdnIndex(WebElement element, int index) {
		explicitWait(element);
		boolean isdisplayed = isdisplayed(element);
		if (isdisplayed) {
			Select select = new Select(element);
			select.selectByIndex(index);
		}
	}

	// 16. Insert value in text box using Java script
	public void elementSendkeysJs(WebElement element, String data) {
		explicitWait(element);
		boolean isdisplayed = isdisplayed(element);
		if (isdisplayed) {
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript("arguments[0].setAttribute('value','" + data + "')", element);
		}
	}

	// 17. Click button using Java script
	public void elementClickJs(WebElement element) {
		explicitWait(element);
		boolean isdisplayed = isdisplayed(element);
		if (isdisplayed) {
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript("arguments[0].click()", element);
		}
	}

	// 18. Launch the browser
	public static void browserLaunch(String browserType) {
		switch (browserType) {
		case "googleChrome":
			driver = new ChromeDriver();
			break;
		case "edge":
			driver = new EdgeDriver();
			break;
		case "firefox":
			driver = new FirefoxDriver();
			break;

		default:
			break;
		}

	}

	// 18.1 Launch the browser
	public static void firefoxBrowserLaunch() {
		driver = new FirefoxDriver();
	}

	// 18.2 Launch the browser
	public static void edgeBrowserLaunch() {
		driver = new EdgeDriver();
	}

	// 19. Switch to child window
	public void childWindow() {
		String windowHandle = driver.getWindowHandle();
		Set<String> windowHandles = driver.getWindowHandles();
		for (String string : windowHandles) {
			if (!windowHandle.equals(string)) {
				driver.switchTo().window(string);
			}
		}
	}

	// 20. Switch to frame by index
	public void frameSwitchByIndex(int data) {
		driver.switchTo().frame(data);
	}

	// 21. Switch to frame by frame id /frame element
	public void frameSwitchByElement(WebElement elemant) {
		explicitWait(elemant);
		boolean isdisplayed = isdisplayed(elemant);
		if (isdisplayed) {
			driver.switchTo().frame(elemant);
		}
	}

	// 21.1 Switch to frame by frame id /frame element
	public void frameSwitchById(WebElement elemant) {
		explicitWait(elemant);
		boolean isdisplayed = isdisplayed(elemant);
		if (isdisplayed) {
			driver.switchTo().frame(elemant);
		}
	}

	// 22. Find locator by id
	public WebElement locatorbyid(String data) {
		WebElement element = driver.findElement(By.id(data));
		return element;
	}

	// 23. Find locator by name
	public WebElement locatorbyname(String data) {
		WebElement element = driver.findElement(By.name(data));
		return element;
	}

	// 24. Find locator by Class name
	public WebElement locatorbyClassName(String data) {
		WebElement element = driver.findElement(By.className(data));
		return element;
	}

	// 25. Find locator by X path
	public WebElement locatorByXpath(String data) {
		WebElement element = driver.findElement(By.xpath(data));
		return element;
	}

	// 25.1. Find locators by X path
	public List<WebElement> locatorsByXpath(String data) {
		List<WebElement> elements = driver.findElements(By.xpath(data));
		return elements;
	}

	// 26. Get all options from drop down as text
	public List<String> elementDdnText(WebElement element) {
		explicitWait(element);
		boolean isdisplayed = isdisplayed(element);
		List<String> allOptions = new ArrayList<>();
		if (isdisplayed) {
			Select select = new Select(element);
			List<WebElement> options = select.getOptions();
			for (WebElement webElement : options) {
				String text = webElement.getText();
				allOptions.add(text);
			}
		}
		return allOptions;
	}

	// 27. Get all options from drop down as attribute
	public List<String> elementDdnAttribute(WebElement element, String data) {
		explicitWait(element);
		List<String> allOptions = new ArrayList<>();
		boolean isdisplayed = isdisplayed(element);
		if (isdisplayed) {
			Select select = new Select(element);
			List<WebElement> options = select.getOptions();
			for (WebElement webElement : options) {
				String attribute = webElement.getAttribute(data);
				allOptions.add(attribute);
			}
		}
		return allOptions;
	}

	// 28. Get the first selected option in drop down as text
	public String elementDdnFirstSelectedOption(WebElement element) {
		explicitWait(element);
		boolean isdisplayed = isdisplayed(element);
		String value = null;
		if (isdisplayed) {
			Select select = new Select(element);
			WebElement firstSelectedOption = select.getFirstSelectedOption();
			@SuppressWarnings("unused")
			String text = firstSelectedOption.getText();
		}
		return value;

	}

	// 29. Verify in drop down is multiple or not
	public boolean isMultiple(WebElement element) {
		explicitWait(element);
		Select select = new Select(element);
		boolean multiple = select.isMultiple();
		return multiple;
	}

	// 30. Implicit Wait
	public static void implicitWait() {
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5));
	}

	public void implicitWait(int sec) {
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(sec));
	}

	// 31. Explicit wait for visibility of
	public void explicitWait(WebElement element) {
		WebDriverWait driverWait = new WebDriverWait(driver, Duration.ofSeconds(5));
		driverWait.until(ExpectedConditions.visibilityOf(element));
	}

	public void explicitWait(WebElement element, int sec) {
		WebDriverWait driverWait = new WebDriverWait(driver, Duration.ofSeconds(sec));
		driverWait.until(ExpectedConditions.visibilityOf(element));
	}

	// 32. Fluent Wait

	// 33. Verify isDisplayed
	public boolean isdisplayed(WebElement element) {
		boolean displayed = element.isDisplayed();
		return displayed;
	}

	// 34. Verify isEnabled
	public boolean isenabled(WebElement element) {
		boolean enabled = element.isEnabled();
		return enabled;
	}

	// 35. Verify isSeleceted
	public boolean isselected(WebElement element) {
		boolean selected = element.isSelected();
		return selected;
	}

	// 36. Deselect by index
	public void deselectByIndex(WebElement element, int data) {
		explicitWait(element);
		boolean isdisplayed = isdisplayed(element);
		if (isdisplayed) {
			Select select = new Select(element);
			select.deselectByIndex(data);
		}
	}

	// 37. Deselect by attribute
	public void deselectByAttribute(WebElement element, String data) {
		explicitWait(element);
		boolean isdisplayed = isdisplayed(element);
		if (isdisplayed) {
			Select select = new Select(element);
			select.deselectByValue(data);
		}
	}

	// 38. Deselect by text
	public void deselectByVisibleText(WebElement element, String data) {
		explicitWait(element);
		boolean isdisplayed = isdisplayed(element);
		if (isdisplayed) {
			Select select = new Select(element);
			select.deselectByVisibleText(data);
		}
	}

	// 39. Deselect All
	public void deselectAll(WebElement element) {
		explicitWait(element);
		boolean isdisplayed = isdisplayed(element);
		if (isdisplayed) {
			Select select = new Select(element);
			select.deselectAll();
		}
	}

	// 40. Get the parent Window
	public String parentWindow() {
		String windowHandle = driver.getWindowHandle();
		return windowHandle;
	}

	// 41. Get all Windows
	public Set<String> allWindows() {
		Set<String> windowHandles = driver.getWindowHandles();
		return windowHandles;
	}

	// 42. Clear text box
	public void clearText(WebElement element) {
		explicitWait(element);
		boolean isdisplayed = isdisplayed(element);
		if (isdisplayed) {
			element.clear();
		}
	}

	// 43. Take Screenshot
	public File takescreenshot() {
		TakesScreenshot ts = (TakesScreenshot) driver;
		File screenshotAs = ts.getScreenshotAs(OutputType.FILE);
		return screenshotAs;
	}

	// 44. Take Screenshot for element
	public File takescreenshotforelement(WebElement element) {
		File screenshotAs = element.getScreenshotAs(OutputType.FILE);
		return screenshotAs;
	}

	// 45. Mouse over action
	public void mouseOver(WebElement element) {
		explicitWait(element);
		boolean isdisplayed = isdisplayed(element);
		if (isdisplayed) {
			Actions actions = new Actions(driver);
			actions.moveToElement(element).perform();
		}
	}

	// 46. Drag and drop
	public void draganddrop(WebElement srcElement, WebElement destElement) {
		explicitWait(destElement);
		boolean isdisplayed = isdisplayed(destElement);
		if (isdisplayed) {
			Actions actions = new Actions(driver);
			actions.dragAndDrop(srcElement, destElement).perform();
		}
	}

	// 47. Right Click
	public void rightClick(WebElement element) {
		explicitWait(element);
		boolean isdisplayed = isdisplayed(element);
		if (isdisplayed) {
			Actions actions = new Actions(driver);
			actions.contextClick(element).perform();
		}
	}

	// 48. Double Click
	public void doubleClick(WebElement element) {
		explicitWait(element);
		boolean isdisplayed = isdisplayed(element);
		if (isdisplayed) {
			Actions actions = new Actions(driver);
			actions.doubleClick(element).perform();
		}
	}

	// 49. Insert value in text box and enter
	public void insertandEnter(WebElement element, String data) {
		explicitWait(element);
		boolean isdisplayed = isdisplayed(element);
		if (isdisplayed) {
			element.sendKeys(data, Keys.ENTER);
		}
	}

	// 50. Refresh page
	public void refreshPage() {
		driver.navigate().refresh();
	}


*****************************************************************************************

1. Data driven framework

Dependency required: poi-ooxml maven dependency


Step 1: Create a folder called excel sheet under the project.
Step 2: Create a excel sheet and save it in local (laptop location).
Step 3: Copy the excel sheet and paste it in the project location.

To open a excel sheet in eclipse:
---------------------------------

-> Right click the excel sheet -> open with -> System editor

Topics covered:
---------------

1. Excel read.
2. Excel write.
3. Excel update.

********************************************************************************************

Page Object Model:
------------------

POM: Page Object Model.

- It is a design pattern in Selenium that creates an object repository for storing all web elements.
- In Page Object Model, consider each web page of an application is a class file.
- Each class file will contain only corresponding web page elements.
- Using these elements, testers can perform operation on the website under test.



1000 Locators --> Single class declared
500 locator developer changed --> Modifying the locators is difficult.
To overcome the above problem statement we go for POM(Page Object Model).

Steps to implement Page Object Model:
-------------------------------------

Step 1: Create each class for respective module.
Step 2: Declare the locators for each class.
How to declare a locator ?  -> @FindBy --> To locate a web element (id, name, classname, xpath)
Step 3: Declare the variables as private.
Step 4: Generate the getters.
How to generate getters ?
Right click -> source -> Generate getters and setters
Step 5: Write the respective business logic for the class
Step 6: Create a constructor and use page factory class

PageFactory.initElements(driver, this);

PageFacory -> Class
initElements -> static method
driver -> WebDriver reference name
this -> keyword, initialize the current class locators

With PageFacory:

1. @FindBy()
2. @FindBys()
3. @FindAll()
4. @CacheLookUp()

findElement  - WebElement.
findElements - List<WebElement>

@FindBy will work on both findElement and findelements

@FindBys() :
-------------

- To find more than one locator for same web element.
- It works based on AND condition
- Combination of id and name locators not possible

Eg: @FindBys({@FIndBy(id='username'), @FindBy(xpath="//input[@name='username']")})


@FindAll():
-----------

- To find more than one locator for same web element.
- It works based on OR condition.
- To handle dynamic web locators.

Eg: @FindAll({@FindBy(id="password"), @FindBy(name="password")})

@CacheLookUp():
--------------

- Memory management.






